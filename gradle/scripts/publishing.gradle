apply from: 'gradle/scripts/helpers.gradle'

setDefaultProperty('publish_to_maven', true, false)
setDefaultProperty('publish_to_curseforge', true, false)
setDefaultProperty('publish_to_modrinth', true, false)

if (propertyBool('publish_to_maven')) {
    assertProperty('maven_name')
    assertProperty('maven_url')
    publishing {
        repositories {
            maven {
                name propertyString('maven_name').replaceAll("\\s", "")
                url propertyString('maven_url')
                credentials(PasswordCredentials)
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java // Publish with standard artifacts
                setGroupId(propertyString('root_package'))// Publish with root package as maven group
                setArtifactId(propertyString('mod_id')) // Publish artifacts with mod id as the artifact id

                // Custom artifact:
                // If you want to publish a different artifact to the one outputted when building normally
                // Create a different gradle task (Jar task), in extra.gradle
                // Remove the 'from components.java' line above
                // Add this line (change the task name):
                // artifacts task_name
            }
        }
    }
}

// Documentation here: https://github.com/matthewprenger/CurseGradle/wiki/
if (propertyBool('publish_to_curseforge')) {
    apply plugin: 'com.matthewprenger.cursegradle'
    assertProperty('curseforge_project_id')
    assertProperty('release_type')
    setDefaultProperty('curseforge_debug', false, false)
    curseforge {
        apiKey = System.getenv('CURSEFORGE_TOKEN') == null ? "" : System.getenv('CURSEFORGE_TOKEN')
        // noinspection GroovyAssignabilityCheck
        project {
            id = propertyString('curseforge_project_id')
            addGameVersion 'Java 8'
            addGameVersion 'Forge'
            addGameVersion '1.12.2'
            releaseType = propertyString('release_type')
            if (!propertyBool('publish_with_changelog')) {
                changelog = parserChangelog()
                changelogType = 'markdown'
            }
            mainArtifact tasks.reobfJar, {
                displayName = "${propertyString('mod_name')} ${propertyString('mod_version')}"
                if (propertyBool('use_mixins')) {
                    relations {
                        requiredDependency 'mixin-booter'
                    }
                }
                if (propertyBool('use_asset_mover')) {
                    relations {
                        requiredDependency 'assetmover'
                    }
                }
                relations {
                    requiredDependency 'ctm'
                    optionalDependency 'chisel'
                }
            }
            options {
                debug = propertyBool('curseforge_debug')
            }
        }
    }
}

// Documentation here: https://github.com/modrinth/minotaur
if (propertyBool('publish_to_modrinth')) {
    apply plugin: 'com.modrinth.minotaur'
    assertProperty('modrinth_project_id')
    assertProperty('release_type')
    setDefaultProperty('modrinth_debug', false, false)
    modrinth {
        token = System.getenv('MODRINTH_TOKEN') ? "" : System.getenv('MODRINTH_TOKEN')
        projectId = propertyString('modrinth_project_id')
        versionNumber = propertyString('mod_version')
        versionType = propertyString('release_type')
        uploadFile = tasks.reobfJar
        gameVersions = ['1.12.2']
        loaders = ['forge']
        debugMode = propertyBool('modrinth_debug')
        if (propertyBool('use_mixins') || propertyBool('use_asset_mover')) {
            dependencies {
                if (propertyBool('use_mixins')) {
                    required.project 'mixinbooter'
                }
                if (propertyBool('use_asset_mover')) {
                    required.project 'assetmover'
                }
            }
        }
        if (!propertyBool('publish_with_changelog')) {
            changelog = parserChangelog()
        }
        if (propertyBool('modrinth_sync_readme')) {
            syncBodyFrom = file('README.md').text
            tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
        }
    }
}

githubRelease {
    token System.getenv('GITHUB_TOKEN') ?: '' // This is your personal access token with Repo permissions
    // You get this from your user settings > developer settings > Personal Access Tokens
    owner 'yuuki1293'
    // default is the last part of your group. Eg group: 'com.github.breadmoirai" => owner: "breadmoirai"
    repo 'ChiselSeparateByChunk' // by default this is set to your project name
    tagName "v${project.version}" // by default this is set to "v${project.version}"
    targetCommitish '1.12.2' // by default this is set to "main"
    releaseName "${rootProject.name} ${project.version} Forge"
    // Release title, by default this is the same as the tagName
    generateReleaseNotes false
    // Generate release notes automatically, if true and body is present, body will be prepended, if name is not given, one will be generated by the tag
    body parserChangelog() // by default this is empty
    draft true // by default this is true
    prerelease false // by default this is false
    releaseAssets tasks.reobfJar
    // this points to which files you want to upload as assets with your release, by default this is empty
    allowUploadToExisting.set false
    // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
    overwrite false
    // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun false
    // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint 'https://api.github.com' // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}
