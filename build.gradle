plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'net.darkhax.curseforgegradle' version '1.1.25'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.github.breadmoirai.github-release' version '2.4.1'
    id 'io.github.yuuki1293.changelog' version '1.1.1'
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        exclusiveContent {
            forRepository {
                maven {
                    url "https://cursemaven.com"
                }
            }
            filter {
                includeGroup "curse.maven"
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"

        compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

[":forge", ":fabric"].each { proj ->
    project(proj) {
        apply plugin: 'com.modrinth.minotaur'
        apply plugin: 'com.github.breadmoirai.github-release'

        changelog {
            file = file("${project.projectDir}/CHANGELOG.md")
        }

        githubRelease {
            token System.getenv('GITHUB_API_KEY') ?: 'XXX' // This is your personal access token with Repo permissions
            // You get this from your user settings > developer settings > Personal Access Tokens
            owner 'yuuki1293'
            // default is the last part of your group. Eg group: 'com.github.breadmoirai" => owner: "breadmoirai"
            repo 'ChiselSeparateByChunk' // by default this is set to your project name
            tagName "v${project.version}" // by default this is set to "v${project.version}"
            targetCommitish '1.20.1-1.20.2' // by default this is set to "main"
            releaseName "${rootProject.name} ${project.version}"
            // Release title, by default this is the same as the tagName
            generateReleaseNotes false
            // Generate release notes automatically, if true and body is present, body will be prepended, if name is not given, one will be generated by the tag
            body changelog.text // by default this is empty
            draft true // by default this is true
            prerelease false // by default this is false
            releaseAssets jar, sourcesJar
            // this points to which files you want to upload as assets with your release, by default this is empty
            allowUploadToExisting.set false
            // Setting this to true will allow this plugin to upload artifacts to a release if it found an existing one. If overwrite is set to true, this option is ignored.
            overwrite false
            // by default false; if set to true, will delete an existing release with the same tag and name
            dryRun false
            // by default false; you can use this to see what actions would be taken without making a release
            apiEndpoint 'https://api.github.com' // should only change for github enterprise users
            client // This is the okhttp client used for http requests
        }

        task uploadAll {
            group = "publishing"
            description = "Uploads the mod to CurseForge, Modrinth, and GitHub releases."

            if (changelog.hasUnreleased()) {
                logger.error("Remove 'Unreleased' in CHANGELOG.")
            } else {
                dependsOn 'publishCurseForge', 'modrinth', 'githubRelease'
            }
        }
    }
}
