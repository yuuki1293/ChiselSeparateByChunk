plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "chiselsbc-forge.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.1"))

    modRuntimeOnly "dev.architectury:architectury-forge:$rootProject.architectury_api_version"
    modRuntimeOnly "curse.maven:chiselreborn-551763:$project.chisel_reborn_version"
    modImplementation "curse.maven:athena-841890:$project.athena_version"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    group = "publishing"
    apiToken = System.getenv('CURSEFORGE_API_KEY') ?: 'XXX'

    def mainFile = upload(rootProject.property('curseforge_id'), remapJar)
    mainFile.releaseType = project.version_type
    mainFile.changelog = changelog.text
    mainFile.changelogType = 'markdown'
    mainFile.displayName = "${rootProject.name} ${project.version}"
    mainFile.addGameVersion('1.20.1', '1.20.2', 'CLIENT')
    mainFile.addJavaVersion('Java 17')
    mainFile.addRequirement('athena')
    mainFile.addOptional('chisel-reborn')
    mainFile.addModLoader(project.name)
    mainFile.withAdditionalFile(remapSourcesJar)
}

def changelogText = changelog.text

modrinth {
    var modrinthToken = System.getenv('MODRINTH_TOKEN') ?: 'XXX'

    token = modrinthToken
    // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = rootProject.property('modrinth_id') // This can be the project ID or the slug. Either will work!
    versionNumber = project.version as String
    versionName = "${rootProject.name} ${project.version}"
    // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = project.version_type // This is the default -- can also be `beta` or `alpha`
    uploadFile = remapJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    additionalFiles = [remapSourcesJar]
    gameVersions = ['1.20.1', '1.20.2'] // Must be an array, even with only one version
    loaders = ['forge'] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    changelog = changelogText
    dependencies {
        required.project 'athena'
        optional.project 'chisel-reborn'
    }
}
